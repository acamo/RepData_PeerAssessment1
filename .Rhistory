mean(mtcars$mpg)
q()
library(lattice)
library(datasets)
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
?rbinom
coin <- rbinom(1,1,0.5)
coin
coin <- rbinom(1,5,0.5)
coin
coin <- rbinom(5,1,0.5)
coin
coin <- rbinom(5,20,0.5)
coin
coin <- rbinom(5,2,0.5)
coin <- rbinom(5,0,0.5)
coin <- rbinom(5,3,0.5)
coin <- rbinom(5,4,0.5)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
View(spam)
names(spam)
nrow(spam)
spam[1,]
summary(spam)
summary(spam$make)
head(spam)
head(spam,n=1)
str(spam)
trainindicator=rbinom(4601,size=1,prob=0.5)
table(trainindicator)
trainspam<- spam[trainindicator==1,]
testspam<- spam[trainindicator==0,]
names(trainspam)
head(trainspam)
table(trainspam$type)
?plot
plot(trainspam$type, trainspam$capitalAve)
mydata <- rnorm (100,2,1)
mydata
mean(mydata)
plot(trainspam[,1:4])
plot(trainspam$capitalAve)
plot(trainspam$type)
plot(trainspam$capitalAve)
plot(trainspam$make)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
print("gino")
airquality
head(airquality)
summary(airquality)
install.packages("xtable")
library(xtable)
xtable(summary(airquality))
xt <-xtable(summary(airquality))
print(xt)
print(xt,type="html")
print(xt,type = "html")
View(xt)
activity <- read.csv("activity\activity.csv", header=TRUE)
getwd()
setwd("C:/Users/acamo/OneDrive - BByond/R/Assignement11/RepData_PeerAssessment1)
setwd("C:/Users/acamo/OneDrive - BByond/R/Assignement11/RepData_PeerAssessment1")
activity <- read.csv("activity\activity.csv", header=TRUE)
dir()
cd activity
cd doc
cd "activity"
activity <- read.csv("activity/activity.csv", header=TRUE)
activity <- read.csv("activity/activity.csv", header=TRUE)
activity
activity <- read.csv("activity/activity.csv", header=TRUE)
cd activity
set activity
setwd("activity")
setwd("doc")
getwd
zipFile <- unzip("activity", list=TRUE)
getwd()
cd..
setwd("C:/Users/acamo/OneDrive - BByond/R/Assignement11/RepData_PeerAssessment1")
zipFile <- unzip("activity", list=TRUE)
zipFile <- unzip("activity/activity.csv", list=TRUE)
list()
dir
dir()
zipFile <- unzip("activity.zip", list=TRUE)
activity <- read.csv(unz("activity",as.character(zipfile$Name)), header=TRUE)
zipFile <- unzip("activity.zip", list=TRUE)
activity <- read.csv(unz("activity.zip",as.character(zipfile$Name)), header=TRUE)
zipFile
print(as.character(zipfile$Name))
zipFile <- unzip("activity.zip", list=TRUE)
activity <- read.csv(unz("activity.zip",as.character(zipFile$Name)), header=TRUE)
View(activity)
summary(activity$date)
summary(activity$interval)
class(activity$interval)
class(activity$steps)
zipFile <- unzip("activity.zip", list=TRUE)
activity <- read.csv(unz("activity.zip",as.character(zipFile$Name)), header=TRUE)
activity$date <- as.date(activity$date)
zipFile <- unzip("activity.zip", list=TRUE)
activity <- read.csv(unz("activity.zip",as.character(zipFile$Name)), header=TRUE)
activity$date <- as.Date(activity$date)
View(activity)
class(activity$date)
activity$date <- as.factor(activity$date)
prova <- lapply(split(activity$date), mean)
prova <- lapply(split(activity,activity$date), mean(activity$steps))
prova <- tapply(activity$steps,activity$date,mean)
prova
class(activity$date)
prova <- tapply(activity$steps,activity$date,sum)
prova
str(prova)
prova[1]
prova[1][1]
class(prova)
nrow(prova)
class(prova[])
class(prova[1][2])
class(prova[1][1])
prova[1][1]
prova[1][2]
prova[3]
prova[3][2]
prova[3][1]
prova <- split(activity, activity$date)
View(prova)
prova[3]
prova[3][862,1]
prova[3][1,1]
prova[3,[1,1]]
prova[3,1]
prova[3,1,1]
prova[3][[1,1]]
prova[3][[1]]
prova[3][[3,4]]
str(prova)
prova[[3]][3,4]
prova[[3]][862,1]
prova[[3]]$steps
prova[[3]][1,3]
prova[[3]][2,3]
prova[[3]][50,3]
lapply(prova,sum(steps,na.rm = TRUE))
lapply(prova,sum(prova$steps,na.rm = TRUE))
lapply(prova,functions(x) {sum(prova$steps,na.rm = TRUE))
lapply(prova,functions(x) { colSums(x[,"steps"],na.rm = TRUE)}
lapply(prova,functions(x) { colSums(x[,"steps"],na.rm = TRUE)})
lapply(prova,function(x) {colSums(x[,"steps"],na.rm = TRUE)})
?colsums
??colSums
tapply(prova,function(x) {colSums(x[,"steps"],na.rm = TRUE)})
apply(prova,function(x) {colSums(x[,"steps"],na.rm = TRUE)})
apply(prova,1,function(x) {colSums(x[,"steps"],na.rm = TRUE)})
prova[["2012-10-01"]][["date"]]
lapply(prova,function(x) {colSums(x[,"steps"],na.rm = TRUE)})
lapply(prova,function(x) {colSums(x[,c("date","steps"],na.rm = TRUE)})
lapply(prova,function(x) {colSums(x[,c("date","steps")],na.rm = TRUE)})
lapply(prova,function(x) {colSums(x[,c("interval","steps")],na.rm = TRUE)})
lapply(prova,function(x) {colSums(x[,c("interval","steps")],na.rm = FALSE)})
lapply(prova,function(x) {sum})
lapply(prova,function(x) {sum("steps")})
lapply(prova,function(x) {sum(x$steps)})
lapply(prova,function(x) {sum(x$steps,na.rm = TRUE)})
activityperday <- split(activity, activity$date)
lapply(activityperday,function(x) {sum(x$steps,na.rm = TRUE)})
activityperday <- split(activity, activity$date)
lapply(activityperday,function(x) {sum(x$steps,na.rm = TRUE)})
library(ggplot2)
View(prova)
View(activityperday)
prova <- lapply(activityperday,function(x) {sum(x$steps,na.rm = TRUE)})
as.data.frame(prova)
prova2 <- as.data.frame(prova)
View(prova2)
prova
prova[[]]
prova[]
df <-prova[]
as.data.frame(df)
df <-prova[[]]
df <-prova[[1]]
df
lapply(activityperday,x$steps)
lapply(activityperday,function(x) {x$steps})
prova <- lapply(activityperday,function(x) {x$steps})
View(prova)
prova <- lapply(activityperday,steps)
prova <- lapply(activityperday,"steps")
prova <- lapply(activityperday,function(x) {x$steps})
prova[[5]]
qplot(activity$date,sum(activity$steps),data=activity)
qplot(activity$date,sum(steps),data=activity)
qplot(date,sum(steps),data=activity)
df <- as.data.frame(prova)
View(df)
table(activity$date)
prova <- table(activity$date)
prova <- table(activity$date,activity$steps)
as.data.frame(prova)
activitydate <- group_by(activity,date)
library(dplyr)
activitydate <- group_by(activity,date)
View(activitydate)
test <- summarise(activitydate, totstep=sum(steps,na.rm = TRUE),meanstep=mean(steps,na.rm = TRUE),medianstep=mean(steps,na.rm = TRUE))
View(test)
prova[["2012-10-01"]]
activityoneday <- activity[,date="2012-10-01"]
activityoneday <- activity[,date=="2012-10-01"]
activityoneday <- activity[,(date=="2012-10-01")]
activityoneday <- activity[,date in "2012-10-01"]
activityoneday <- activity[,activity$date == "2012-10-01"]
activityoneday <- activity[,activity$date == "2012-10-01"]
activityoneday <- activity[activity$date == "2012-10-01",]
View(activityoneday)
bool <- is.na(activityoneday$steps)
bool <- !(is.na(activityoneday$steps))
select(activityoneday,steps == bool)
bool <- is.na(activityoneday$steps)
activityoneday$steps(!bool)
activityoneday$steps[!bool]
activityoneday$steps[bool]
activityoneday <- activity[activity$date == "2012-10-08",]
bool <- is.na(activityoneday$steps)
activityoneday$steps[!bool]
bool <- is.na(activity$steps)
nrow(bool)
qplot(date,totstep,data=test)
qplot(date,totstep,data=test,geom=histogram)
qplot(date,totstep,data=test,geom="histogram")
qplot(totstep,data=test,geom="histogram")
qplot(date,data=test,geom="histogram")
qplot(totstep,data=test,geom="histogram")
ggplot(test,aes(date,totstep),geom_col())
ggplot(test,aes(date,totstep),geom_bar())
ggplot(test,aes(date,totstep),geom_col())
ggplot(activity,aes(date,steps),geom_col())
ggplot(test,aes(date,totstep))
ggplot(activity,aes(date,steps),geom_col(),na.RM=TRUE)
ggplot(activity,aes(date,steps),geom_col(),na.RM=FALSE)
ggplot(test,aes(date,steps),geom_col())
ggplot(test,aes(date,totstep),geom_col())
ggplot(test,aes(date,meanstep),geom_col())
ggplot(test,aes(date,medianstep),geom_col())
ggplot(test,aes(date,totstep),geom_point())
qplot(date,totstep,data =
qplot(date,totstep,data = test)
qplot(date,totstep,data = test,geom_col())
qplot(date,totstep,data = test,geom_bar())
installed.packages("easyggplot2")
library(easyggplot2)
install.packages("devtools")
library(devtools)
install_github("easyGgplot2", "kassambara")
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
